/**
 * @file src/types/botilito.ts
 * @description Centralized type definitions for the Botilito application.
 */

// Represents the payload for submitting new content for analysis.
export type IngestPayload = {
    url: string;
    content_hash?: string;
    perform_case_inference?: boolean;
} | {
    text: string;
    content_hash?: string;
    vector_de_transmision?: string;
    perform_case_inference?: boolean;
};

// Represents the structure of an analysis job managed by the client.
export interface AnalysisJob {
    id: string; // Client-side generated UUID
    jobId?: string; // Backend-side job ID, available after submission
    payload: IngestPayload & { content: string }; // The original submission payload + raw content
    status: 'pending' | 'processing' | 'completed' | 'failed';
    result: FullAnalysisResponse | null;
    error: string | null;
    startTime: string;
    endTime?: string;
}

// Represents the backend response when a job is accepted for processing.
export interface JobAcceptedResponse {
    job_id: string;
    message: string;
}

// Represents the status of a job when polling the backend.
export interface JobStatusResponse {
    id: string;
    status: 'pending' | 'processing' | 'completed' | 'failed';
    result?: FullAnalysisResponse;
    error?: {
        message: string;
        stack?: string;
    };
}

// Represents the breakdown of consensus for a specific label.
export interface ConsensusBreakdown {
    weighted_score: number;
    agreement_score: number;
    ai_agrees: boolean;
    human_votes: number;
}

// Represents the consensus state for a case study.
export interface Consensus {
    state: 'ai_only' | 'human_consensus' | 'conflicted';
    final_labels: string[];
    breakdown: Record<string, ConsensusBreakdown> | null;
}

// Represents a related document found during analysis.
export interface RelatedDocument {
    id: string;
    url: string;
    title: string;
    summary: string;
    similarity: number;
}

// Represents a web search result used for verification.
export interface WebSearchResult {
    title: string;
    url: string;
    snippet?: string;
}

// Metadata associated with the original submitted document.
export interface DocumentMetadata {
    theme?: string;
    region?: string;
    classification_labels?: Record<string, string>;
    isTextSubmission?: boolean;
    submissionType?: string;
    vectores_de_transmision?: string[];
}

// Metadata associated with the generated case study.
export interface CaseStudyMetadata {
    ai_labels?: Record<string, string>;
    related_documents?: RelatedDocument[];
    web_search_results?: WebSearchResult[];
}

// Represents the detailed case study generated by the backend.
export interface CaseStudy {
    id: string;
    case_id: string; // Often the same as id
    summary: string;
    metadata?: CaseStudyMetadata;
    embedding?: any;
    created_at: string;
    case_number?: number;
    consensus_score?: any;
}

// Represents the full, detailed analysis response from the backend.
export interface FullAnalysisResponse {
    id: string;
    url?: string;
    title: string;
    summary: string;
    created_at: string;
    metadata?: DocumentMetadata;
    case_study?: CaseStudy;
    consensus?: Consensus;
}
