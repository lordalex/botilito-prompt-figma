import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Textarea } from './ui/textarea';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Checkbox } from './ui/checkbox';
import { Separator } from './ui/separator';
import { 
  Users, CheckCircle, XCircle, AlertTriangle, Bot, FileText, Image as ImageIcon,
  Video, Volume2, Link2, MessageSquare, Target, Flame, Vote, DollarSign, Zap,
  Eye, Ban, Skull, Microscope, AlertCircle, HelpCircle, Megaphone, Shield,
  Heart, Smile, ArrowLeft, Newspaper, Tag, ExternalLink, User, Clock, Loader2, Send,
  Crosshair
} from 'lucide-react';
import { getCaseDetails } from '../utils/apiService';

const ETIQUETAS_CATEGORIAS = [
  { id: 'verdadero', label: 'Verdadero', icon: CheckCircle, color: 'text-green-600', bg: 'bg-green-50', border: 'border-green-200', virulencia: 0, descripcion: 'Información verificada y respaldada por fuentes confiables' },
  { id: 'falso', label: 'Falso', icon: XCircle, color: 'text-red-600', bg: 'bg-red-50', border: 'border-red-200', virulencia: 90, descripcion: 'Información completamente falsa sin sustento verificable' },
  { id: 'enganoso', label: 'Engañoso', icon: AlertTriangle, color: 'text-orange-600', bg: 'bg-orange-50', border: 'border-orange-200', virulencia: 75, descripcion: 'Mezcla hechos reales con interpretaciones falsas o exageradas' },
  { id: 'satirico', label: 'Satírico/Humorístico', icon: Smile, color: 'text-blue-600', bg: 'bg-blue-50', border: 'border-blue-200', virulencia: 20, descripcion: 'Contenido humorístico que puede ser malinterpretado.' },
  { id: 'manipulado', label: 'Manipulado', icon: ImageIcon, color: 'text-purple-600', bg: 'bg-purple-50', border: 'border-purple-200', virulencia: 85, descripcion: 'Contenido editado para cambiar su significado.' },
  { id: 'sin_contexto', label: 'Sin contexto', icon: AlertCircle, color: 'text-amber-600', bg: 'bg-amber-50', border: 'border-amber-200', virulencia: 60, descripcion: 'Contenido real usado en un contexto erróneo.' },
  { id: 'no_verificable', label: 'No verificable', icon: HelpCircle, color: 'text-gray-600', bg: 'bg-gray-50', border: 'border-gray-200', virulencia: 35, descripcion: 'Información sin fuentes suficientes para corroborar.' },
  { id: 'teoria_conspirativa', label: 'Teoría conspirativa', icon: Eye, color: 'text-violet-600', bg: 'bg-violet-50', border: 'border-violet-200', virulencia: 80, descripcion: 'Narrativas que sugieren conspiraciones sin evidencia.' },
  { id: 'discurso_odio', label: 'Discurso de Odio', icon: Skull, color: 'text-red-800', bg: 'bg-red-100', border: 'border-red-300', virulencia: 95, descripcion: 'Promueve odio o discriminación.' },
  { id: 'incitacion_violencia', label: 'Incitación a la violencia', icon: Flame, color: 'text-red-900', bg: 'bg-red-100', border: 'border-red-400', virulencia: 98, descripcion: 'Contenido que promueve o incita actos violentos.' },
  { id: 'suplantacion_identidad', label: 'Suplantación de identidad', icon: User, color: 'text-purple-700', bg: 'bg-purple-100', border: 'border-purple-300', virulencia: 88, descripcion: 'Se hace pasar por otra persona u organización.' },
  { id: 'sensacionalista', label: 'Sensacionalista', icon: Megaphone, color: 'text-orange-500', bg: 'bg-orange-50', border: 'border-orange-200', virulencia: 55, descripcion: 'Exagera para generar clics o emociones.' },
];

type Case = Awaited<ReturnType<typeof getCaseDetails>>;

interface CaseDetailViewProps {
  caseId: string;
  onBackToList: () => void;
  onSubmit: (diagnosis: any) => void;
}

export function CaseDetailView({ caseId, onBackToList, onSubmit }: CaseDetailViewProps) {
    const [caseData, setCaseData] = useState<Case | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [marcadoresDiagnostico, setMarcadoresDiagnostico] = useState<string[]>([]);
    const [marcadoresJustificaciones, setMarcadoresJustificaciones] = useState<{ [key: string]: string }>({});
    const [marcadoresEnlaces, setMarcadoresEnlaces] = useState<{ [key: string]: string }>({});
    const [verificationNotes, setVerificationNotes] = useState('');

    useEffect(() => {
        getCaseDetails(caseId).then(data => {
            setCaseData(data);
            if (data) {
                setMarcadoresDiagnostico(data.aiAnalysis.detectedMarkers || []);
            }
            setIsLoading(false);
        });
    }, [caseId]);
    
    const toggleMarcadorDiagnostico = (id:string) => setMarcadoresDiagnostico(p => p.includes(id) ? p.filter(i => i !== id) : [...p, id]);

    const handleInternalSubmit = () => {
        const diagnosis = { caseId, marcadores: marcadoresDiagnostico, justificaciones: marcadoresJustificaciones, enlaces: marcadoresEnlaces, notas: verificationNotes };
        onSubmit(diagnosis);
    };

    if (isLoading) return <div className="flex justify-center items-center h-96"><Loader2 className="h-8 w-8 animate-spin" /></div>;
    if (!caseData) return <p>Caso no encontrado.</p>;

    return (
        <div className="space-y-6">
            <Button variant="outline" onClick={onBackToList}><ArrowLeft className="mr-2 h-4 w-4" />Volver a la lista</Button>
            <Card>
                <CardHeader>
                    <CardTitle className="text-2xl">{caseData.title}</CardTitle>
                    <CardDescription>Caso: {caseData.id}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    <Separator />
                    <div>
                        <Label className="mb-4 flex items-center space-x-2"><Target className="h-4 w-4 text-primary" /><span>Marcadores de Diagnóstico</span></Label>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                            {ETIQUETAS_CATEGORIAS.map((marcador) => {
                                const Icon = marcador.icon;
                                const isSelected = marcadoresDiagnostico.includes(marcador.id);
                                return (
                                    <div key={marcador.id} className={`border-2 rounded-lg transition-all ${isSelected ? `${marcador.border} ${marcador.bg} shadow-sm` : 'border-gray-200 hover:border-primary/30 hover:bg-accent/30'}`}>
                                        <div className="flex items-start space-x-3 p-4 cursor-pointer" onClick={() => toggleMarcadorDiagnostico(marcador.id)}>
                                            <Checkbox checked={isSelected} className="mt-1" />
                                            <div className="flex-1">
                                                <div className="flex items-center space-x-2 mb-1"><Icon className={`h-5 w-5 ${marcador.color}`} /><Label className="cursor-pointer font-medium">{marcador.label}</Label></div>
                                                <p className="text-xs text-muted-foreground">{marcador.descripcion}</p>
                                            </div>
                                        </div>
                                        {isSelected && (
                                            <div className="px-4 pb-4 space-y-3 border-t pt-3 mt-2">
                                                 <div>
                                                    <Label className="text-xs text-muted-foreground mb-1 flex items-center space-x-1"><MessageSquare className="h-3 w-3" /><span>Justificación:</span></Label>
                                                    <Textarea placeholder={`Explica por qué aplica "${marcador.label}"...`} value={marcadoresJustificaciones[marcador.id] || ''} onChange={(e) => setMarcadoresJustificaciones(prev => ({...prev, [marcador.id]: e.target.value}))} className="text-sm resize-none" rows={3} />
                                                </div>
                                                <div>
                                                    <Label className="text-xs text-muted-foreground mb-1 flex items-center space-x-1"><Link2 className="h-3 w-3" /><span>Enlace de soporte (opcional):</span></Label>
                                                    <Input type="url" placeholder="https://ejemplo.com/fuente" value={marcadoresEnlaces[marcador.id] || ''} onChange={(e) => setMarcadoresEnlaces(prev => ({...prev, [marcador.id]: e.target.value}))} className="text-sm" />
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                );
                            })}
                        </div>
                    </div>
                    <Separator />
                    <div>
                        <Label htmlFor="notes" className="mb-2 flex items-center space-x-2"><MessageSquare className="h-4 w-4 text-primary" /><span>Notas Adicionales del Diagnóstico</span></Label>
                        <Textarea id="notes" placeholder="Agrega observaciones generales..." value={verificationNotes} onChange={(e) => setVerificationNotes(e.target.value)} rows={4} className="resize-none" />
                    </div>
                    <Separator />
                    <div className="flex justify-end">
                        <Button onClick={handleInternalSubmit} disabled={marcadoresDiagnostico.length === 0} size="lg"><Send className="mr-2 h-4 w-4" />Enviar Diagnóstico Humano</Button>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}
